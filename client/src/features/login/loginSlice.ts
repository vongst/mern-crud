import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL

export interface LoginState {
  loggedIn: boolean,
  userName: string | null,
  token?: null | any,
  status: 'idle' | 'loading' | 'failed',
}

const initialState: LoginState = {
  loggedIn: false,
  userName: null,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(loginAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const loginAsync = createAsyncThunk(
//   'login/fetchUser',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

// export const fetchUserAsync = createAsyncThunk('login/fetchUser', async () => {
//   const response = await axios.post('http://localhost:5000/auth', {})
//   // console.log('response.data');
//   return response.data
// })

export const loginAsync = createAsyncThunk(
  'login/fetchUser',
  async (query: {username: string, password: string}) => {
    console.log(query)
    
    const response = await axios.post(API_URL + 'auth', query)

    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


export const loginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    verifyAuth: (state: any, action: PayloadAction<{username: string, password: string}>) => {

      console.log("reducer:verifyAuth " + action.payload)

      // axios.post('http://localhost:5000/auth', action.payload);

      // console.log(response)
      // state.loggedIn = true;
      // state.userName = action.payload.username
      // state.token = response.status

      // axios.post('http://localhost:5000/auth', action.payload)
      //   .then((response) => {

      //     console.log(response)
      //     state.loggedIn = true;
      //     state.userName = action.payload.username
      //     state.token = response.status
      //   })
      //   .catch((error) => {})
    },
    userLogIn: (state, action: PayloadAction<string>) => {
      state.loggedIn = true;
      state.userName = action.payload;
    },
    userLogOut: (state) => {
      state.loggedIn = false;
      state.userName = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.userName = null
        state.token = null
        state.loggedIn = false;
        state.status = 'loading';


      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        console.log("loginAsync.fulfilled\n " + JSON.stringify(state) + JSON.stringify(action))
        state.status = 'idle';
        state.token = action.payload.token;
        state.userName = action.payload.username;
        state.loggedIn = true;
      })
      .addCase(loginAsync.rejected, (state) => {
        console.log("loginAsync.rejected\n ")
        state.status = 'failed';
        state.userName = null
        state.token = null
        state.loggedIn = false;
      });
  },
});

export const { userLogIn, userLogOut, verifyAuth } = loginSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectIsLoggedIn = (state: RootState) => state.login.loggedIn;
export const selectUserName = (state: RootState) => state.login.userName;
export const selectToken = (state: RootState) => state.login.token;

export default loginSlice.reducer;